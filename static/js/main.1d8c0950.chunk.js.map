{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Editor","props","react_default","a","createElement","id","className","type","onChange","handleChange","value","placeholder","Preview","esm","this","markdown","React","Component","ToolBar","name","NavigationBar","Content","App_ToolBar","App_Preview","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","setState","document","getElementById","App_NavigationBar","App_Content","bind","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kMCKxC,SAASC,EAAOC,GACd,OACEC,EAAAC,EAAAC,cAAA,YACEC,GAAG,WACHC,UAAU,OACVC,KAAK,OACLC,SAAUP,EAAMQ,aAChBC,MAAOC,QAKPC,mLAEF,OACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACAP,UAAWQ,KAAKb,MAAMK,WAEnBQ,KAAKb,MAAMc,iBANEC,IAAMC,WAYtBC,mLAEF,OACEhB,EAAAC,EAAAC,cAAA,OACAE,UAAU,cACVD,GAAIS,KAAKb,MAAMkB,MAEZL,KAAKb,MAAMkB,aAPEH,IAAMC,WAatBG,mLAEF,OACElB,EAAAC,EAAAC,cAAA,OACAE,UAAWQ,KAAKb,MAAMK,WACpBJ,EAAAC,EAAAC,cAAA,wCALoBY,IAAMC,WAW5BI,mLAEF,OACEnB,EAAAC,EAAAC,cAAA,OACAE,UAAWQ,KAAKb,MAAMK,WACpBJ,EAAAC,EAAAC,cAACkB,EAAD,CACAH,KAAK,WAELjB,EAAAC,EAAAC,cAACJ,EAAD,CACAM,UAAU,SACVG,aAAcK,KAAKb,MAAMQ,eAEzBP,EAAAC,EAAAC,cAACkB,EAAD,CACAH,KAAK,YAELjB,EAAAC,EAAAC,cAACmB,EAAD,CACAjB,UAAU,UACVS,SAAUD,KAAKb,MAAMc,mBAjBPC,IAAMC,WAwBtBO,cAEJ,SAAAA,EAAYvB,GAAM,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAZ,KAAAU,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAhB,KAAMb,KACD8B,MAAQ,CACXhB,SAASJ,GAHKc,8EAQhBX,KAAKkB,SAAS,CACZjB,SAASkB,SAASC,eAAe,YAAYxB,yCAK/C,OACER,EAAAC,EAAAC,cAAA,OACAE,UAAU,OACRJ,EAAAC,EAAAC,cAAC+B,EAAD,CACA7B,UAAU,YAEVJ,EAAAC,EAAAC,cAACgC,EAAD,CACA9B,UAAU,cACVS,SAAUD,KAAKiB,MAAMhB,SACrBN,aAAcK,KAAKL,aAAa4B,KAAKvB,gBAzB3BE,IAAMC,WAgClBN,EAAW,4IAOFa,ICxGKc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASZ,SAASC,eAAe,SD2H3C,kBAAmBY,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1d8c0950.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Markdown from 'markdown-to-jsx';\n\nfunction Editor(props) {\n  return (\n    <textarea \n      id='textarea'\n      className='text'\n      type='text'\n      onChange={props.handleChange}\n      value={placeholder}\n    />\n  );\n}\n\nclass Preview extends React.Component{\n  render(){\n    return(\n      <Markdown\n      className={this.props.className}\n      >\n        {this.props.markdown}\n      </Markdown>\n    );\n  }\n}\n\nclass ToolBar extends React.Component {\n  render(){\n    return(\n      <div\n      className='toolbar-div'\n      id={this.props.name}\n      >\n        {this.props.name}\n      </div>\n    );\n  }\n}\n\nclass NavigationBar extends React.Component{\n  render(){\n    return(\n      <div \n      className={this.props.className}>\n        <h1>Markdown Previewer</h1>\n      </div>\n    );\n  }\n}\n\nclass Content extends React.Component{\n  render(){\n    return(\n      <div\n      className={this.props.className}>\n        <ToolBar\n        name='Editor'\n        />\n        <Editor\n        className='editor'\n        handleChange={this.props.handleChange}\n        />\n        <ToolBar\n        name='Preview'\n        />\n        <Preview\n        className='preview'\n        markdown={this.props.markdown}\n        />\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      markdown:placeholder,\n    }\n  }\n\n  handleChange(){\n    this.setState({\n      markdown:document.getElementById('textarea').value,\n    });\n  }\n\n  render (){\n    return (\n      <div\n      className='App'>\n        <NavigationBar\n        className='nav-bar'\n        />\n        <Content\n        className='content-div'\n        markdown={this.state.markdown}\n        handleChange={this.handleChange.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nconst placeholder = \n`# Welcome to my React Markdown Previewer!\n\n## Live editing will be provided very soon\n### Until then paste your markdown text below:\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}